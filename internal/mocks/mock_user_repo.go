// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	user "gafroshka-main/internal/types/user"
	user0 "gafroshka-main/internal/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// ChangeProfile mocks base method.
func (m *MockUserRepo) ChangeProfile(userID string, updateUser user.ChangeUser) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeProfile", userID, updateUser)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeProfile indicates an expected call of ChangeProfile.
func (mr *MockUserRepoMockRecorder) ChangeProfile(userID, updateUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeProfile", reflect.TypeOf((*MockUserRepo)(nil).ChangeProfile), userID, updateUser)
}

// CheckUser mocks base method.
func (m *MockUserRepo) CheckUser(email, password string) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", email, password)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockUserRepoMockRecorder) CheckUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockUserRepo)(nil).CheckUser), email, password)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(u user.CreateUser) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", u)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), u)
}

// Info mocks base method.
func (m *MockUserRepo) Info(userID string) (*user0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", userID)
	ret0, _ := ret[0].(*user0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockUserRepoMockRecorder) Info(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockUserRepo)(nil).Info), userID)
}
