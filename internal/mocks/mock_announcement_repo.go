// Code generated by MockGen. DO NOT EDIT.
// Source: announcement.go

// Package mocks is a generated GoMock package.
package mocks

import (
	announcement "gafroshka-main/internal/announcement"
	announcement0 "gafroshka-main/internal/types/announcement"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnnouncementRepo is a mock of AnnouncementRepo interface.
type MockAnnouncementRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAnnouncementRepoMockRecorder
}

// MockAnnouncementRepoMockRecorder is the mock recorder for MockAnnouncementRepo.
type MockAnnouncementRepoMockRecorder struct {
	mock *MockAnnouncementRepo
}

// NewMockAnnouncementRepo creates a new mock instance.
func NewMockAnnouncementRepo(ctrl *gomock.Controller) *MockAnnouncementRepo {
	mock := &MockAnnouncementRepo{ctrl: ctrl}
	mock.recorder = &MockAnnouncementRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnnouncementRepo) EXPECT() *MockAnnouncementRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnnouncementRepo) Create(a announcement0.CreateAnnouncement) (*announcement.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", a)
	ret0, _ := ret[0].(*announcement.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAnnouncementRepoMockRecorder) Create(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnnouncementRepo)(nil).Create), a)
}

// GetByID mocks base method.
func (m *MockAnnouncementRepo) GetByID(id string) (*announcement.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*announcement.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAnnouncementRepoMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAnnouncementRepo)(nil).GetByID), id)
}

// GetInfoForShoppingCart mocks base method.
func (m *MockAnnouncementRepo) GetInfoForShoppingCart(ids []string) ([]announcement0.InfoForSC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoForShoppingCart", ids)
	ret0, _ := ret[0].([]announcement0.InfoForSC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoForShoppingCart indicates an expected call of GetInfoForShoppingCart.
func (mr *MockAnnouncementRepoMockRecorder) GetInfoForShoppingCart(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoForShoppingCart", reflect.TypeOf((*MockAnnouncementRepo)(nil).GetInfoForShoppingCart), ids)
}

// GetTopN mocks base method.
func (m *MockAnnouncementRepo) GetTopN(limit int) ([]announcement.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopN", limit)
	ret0, _ := ret[0].([]announcement.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopN indicates an expected call of GetTopN.
func (mr *MockAnnouncementRepoMockRecorder) GetTopN(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopN", reflect.TypeOf((*MockAnnouncementRepo)(nil).GetTopN), limit)
}

// Search mocks base method.
func (m *MockAnnouncementRepo) Search(query string) ([]announcement.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", query)
	ret0, _ := ret[0].([]announcement.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockAnnouncementRepoMockRecorder) Search(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockAnnouncementRepo)(nil).Search), query)
}

// UpdateRating mocks base method.
func (m *MockAnnouncementRepo) UpdateRating(id string, rate int) (*announcement.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRating", id, rate)
	ret0, _ := ret[0].(*announcement.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRating indicates an expected call of UpdateRating.
func (mr *MockAnnouncementRepoMockRecorder) UpdateRating(id, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRating", reflect.TypeOf((*MockAnnouncementRepo)(nil).UpdateRating), id, rate)
}
