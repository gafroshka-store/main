// Code generated by MockGen. DO NOT EDIT.
// Source: shopping_cart.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShoppingCartRepo is a mock of ShoppingCartRepo interface.
type MockShoppingCartRepo struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingCartRepoMockRecorder
}

// MockShoppingCartRepoMockRecorder is the mock recorder for MockShoppingCartRepo.
type MockShoppingCartRepoMockRecorder struct {
	mock *MockShoppingCartRepo
}

// NewMockShoppingCartRepo creates a new mock instance.
func NewMockShoppingCartRepo(ctrl *gomock.Controller) *MockShoppingCartRepo {
	mock := &MockShoppingCartRepo{ctrl: ctrl}
	mock.recorder = &MockShoppingCartRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingCartRepo) EXPECT() *MockShoppingCartRepoMockRecorder {
	return m.recorder
}

// AddAnnouncement mocks base method.
func (m *MockShoppingCartRepo) AddAnnouncement(userID, announcementID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnnouncement", userID, announcementID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAnnouncement indicates an expected call of AddAnnouncement.
func (mr *MockShoppingCartRepoMockRecorder) AddAnnouncement(userID, announcementID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnnouncement", reflect.TypeOf((*MockShoppingCartRepo)(nil).AddAnnouncement), userID, announcementID)
}

// DeleteAnnouncement mocks base method.
func (m *MockShoppingCartRepo) DeleteAnnouncement(userID, announcementID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnouncement", userID, announcementID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnnouncement indicates an expected call of DeleteAnnouncement.
func (mr *MockShoppingCartRepoMockRecorder) DeleteAnnouncement(userID, announcementID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnouncement", reflect.TypeOf((*MockShoppingCartRepo)(nil).DeleteAnnouncement), userID, announcementID)
}

// GetByUserID mocks base method.
func (m *MockShoppingCartRepo) GetByUserID(userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockShoppingCartRepoMockRecorder) GetByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockShoppingCartRepo)(nil).GetByUserID), userID)
}
