// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\BaronPipistron\Desktop\GoProject\main\internal\user_feedback\user_feedback.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	user_feedback "gafroshka-main/internal/types/user_feedback"
	user_feedback0 "gafroshka-main/internal/user_feedback"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserFeedbackRepo is a mock of UserFeedbackRepo interface.
type MockUserFeedbackRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserFeedbackRepoMockRecorder
}

// MockUserFeedbackRepoMockRecorder is the mock recorder for MockUserFeedbackRepo.
type MockUserFeedbackRepoMockRecorder struct {
	mock *MockUserFeedbackRepo
}

// NewMockUserFeedbackRepo creates a new mock instance.
func NewMockUserFeedbackRepo(ctrl *gomock.Controller) *MockUserFeedbackRepo {
	mock := &MockUserFeedbackRepo{ctrl: ctrl}
	mock.recorder = &MockUserFeedbackRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFeedbackRepo) EXPECT() *MockUserFeedbackRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserFeedbackRepo) Create(ctx context.Context, userFeedback *user_feedback0.UserFeedback) (*user_feedback0.UserFeedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userFeedback)
	ret0, _ := ret[0].(*user_feedback0.UserFeedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserFeedbackRepoMockRecorder) Create(ctx, userFeedback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserFeedbackRepo)(nil).Create), ctx, userFeedback)
}

// Delete mocks base method.
func (m *MockUserFeedbackRepo) Delete(ctx context.Context, userFeedbackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userFeedbackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserFeedbackRepoMockRecorder) Delete(ctx, userFeedbackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserFeedbackRepo)(nil).Delete), ctx, userFeedbackID)
}

// GetByID mocks base method.
func (m *MockUserFeedbackRepo) GetByID(ctx context.Context, userFeedbackID string) (*user_feedback0.UserFeedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userFeedbackID)
	ret0, _ := ret[0].(*user_feedback0.UserFeedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserFeedbackRepoMockRecorder) GetByID(ctx, userFeedbackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserFeedbackRepo)(nil).GetByID), ctx, userFeedbackID)
}

// GetByUserID mocks base method.
func (m *MockUserFeedbackRepo) GetByUserID(ctx context.Context, userRecipientID string) ([]*user_feedback0.UserFeedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userRecipientID)
	ret0, _ := ret[0].([]*user_feedback0.UserFeedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockUserFeedbackRepoMockRecorder) GetByUserID(ctx, userRecipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockUserFeedbackRepo)(nil).GetByUserID), ctx, userRecipientID)
}

// Update mocks base method.
func (m *MockUserFeedbackRepo) Update(ctx context.Context, userFeedbackID string, updateUserFeedback user_feedback.UpdateUserFeedback) (*user_feedback0.UserFeedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userFeedbackID, updateUserFeedback)
	ret0, _ := ret[0].(*user_feedback0.UserFeedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserFeedbackRepoMockRecorder) Update(ctx, userFeedbackID, updateUserFeedback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserFeedbackRepo)(nil).Update), ctx, userFeedbackID, updateUserFeedback)
}
