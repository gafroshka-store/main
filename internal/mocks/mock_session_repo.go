// Code generated by MockGen. DO NOT EDIT.
// Source: internal/session/session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	session "gafroshka-main/internal/session"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepo is a mock of SessionRepo interface.
type MockSessionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepoMockRecorder
}

// MockSessionRepoMockRecorder is the mock recorder for MockSessionRepo.
type MockSessionRepoMockRecorder struct {
	mock *MockSessionRepo
}

// NewMockSessionRepo creates a new mock instance.
func NewMockSessionRepo(ctrl *gomock.Controller) *MockSessionRepo {
	mock := &MockSessionRepo{ctrl: ctrl}
	mock.recorder = &MockSessionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepo) EXPECT() *MockSessionRepoMockRecorder {
	return m.recorder
}

// CheckSession mocks base method.
func (m *MockSessionRepo) CheckSession(r *http.Request) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", r)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession.
func (mr *MockSessionRepoMockRecorder) CheckSession(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockSessionRepo)(nil).CheckSession), r)
}

// CreateSession mocks base method.
func (m *MockSessionRepo) CreateSession(ctx context.Context, w http.ResponseWriter, userID, email string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, w, userID, email)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionRepoMockRecorder) CreateSession(ctx, w, userID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionRepo)(nil).CreateSession), ctx, w, userID, email)
}

// ExtendSession mocks base method.
func (m *MockSessionRepo) ExtendSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendSession indicates an expected call of ExtendSession.
func (mr *MockSessionRepoMockRecorder) ExtendSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendSession", reflect.TypeOf((*MockSessionRepo)(nil).ExtendSession), ctx, sessionID)
}
