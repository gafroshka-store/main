services:
  app:
    #   image: golang:1.23
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
    networks:
      - shared-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started

  db:
    image: postgres:17
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: love
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d store"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 3s
    networks:
      - shared-network

  redis:
    image: redis
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    command: [ "redis-server", "--appendonly", "yes" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - shared-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - shared-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    mem_reservation: 512m

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - shared-network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - shared-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - shared-network

  analytics-service:
    build:
      context: .
      dockerfile: ./Dockerfile_analytics
    ports:
      - "8082:8082"
    networks:
      - shared-network
    depends_on:
      kafka:
        condition: service_started
      db-analytics:
        condition: service_started
    environment:
      - CONFIG_PATH=./config/analytics-config.yaml

  db-analytics:
    image: postgres:17
    container_name: db-analytics
    environment:
      POSTGRES_DB: analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: love
    ports:
      - "5434:5432"
    volumes:
      - db_analytics_data:/var/lib/postgresql/data
      - ./db/analytics_init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - shared-network

volumes:
  db_data:
  redis_data:
  esdata:
  db_analytics_data:

networks:
  shared-network:
    name: shared-network
    external: false